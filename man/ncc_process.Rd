% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ncc_process.R
\name{ncc_process}
\alias{ncc_process}
\title{Analyse correlation data for relative velocity changes.}
\usage{
ncc_process(data, master = "mean", normalise = TRUE, sides = "both",
  range = 0.01, steps = 100, method = "r", reject = 0, ...)
}
\arguments{
\item{data}{\code{list} object, output of \code{aux_nccpreprocess},
containing the elements \code{time} (vector with time stamps of 
cross-correlation data), \code{lag} (vector of lag times around centre)
and \code{correlation} (matrix with row-wise organised time snippets of 
cross-correlation data).}

\item{master}{\code{Character} value, method used to calculate master 
correlation trace. One out of \code{"mean"}, \code{"median"} and 
\code{"quantile"}. Default is \code{"mean"}. IF \code{"quantile"} is used,
the quantile probability must be specified as well, e.g., 
\code{"probs = 0.5"}. Alternatively, the master correlation function can 
be provided directly as numeric vector.}

\item{normalise}{\code{Logical} value, option to normalise the data set 
before calculating the master trace. Default is \code{TRUE}.}

\item{sides}{\code{Character} value. One out of \code{"both"} (both sides
of the input data), \code{"left"} (only negative time lags), \code{"right"} 
(only positive time lags) and \code{single} (only right side is used,  
expecting data from a single source and direction). Default is 
\code{"both"}.}

\item{range}{\code{Numeric} value, relative range of the stretch. Default is 
\code{0.01} (1 percent).}

\item{steps}{\code{Numeric} value, number of stretch steps (step 
resolution). Default is \code{100}.}

\item{method}{\code{Charcter} value, method used to identify best match of 
cross correlation time slices with stretched master data set. One out of 
\code{"rmse"} (minimum root mean square error) and \code{"r"} (maximum 
R^2). Default is \code{"r"}.}

\item{reject}{\code{Numeric} value, rejection threshold for stretch values.
This value defines up to which quantile matching stretch solutions will 
be treated as valid solutions. Default is \code{0} (Only the minimum RMSE
value or the maximum R^2 value is returned, and the returned standard 
deviation will be NA). A change to \code{0.05} will return mean and 
standard deviation of the five best percent of the solutions.}

\item{\dots}{Further arguments passed to the function.}
}
\value{
A \code{Data frame}, mean and standard deviations of the relative 
velocity changes for input time windows.
}
\description{
The function calculates relative velocity changes over time based on 
cross-correlation data (i.e., the output of \code{aux_nccpreprocess}).
}
\examples{

## preprocess data and calculate window-wise cross-correlation functions
cc <- ncc_preprocess(period = as.POSIXct(x = c("2017-04-09 00:00:00",
                                                  "2017-04-09 03:00:00"),
                                            tz = "UTC"),
                        station = c("RUEG1", "RUEG2"),
                        component = c("BHZ", "BHZ"),
                        dir = paste0(system.file("extdata", 
                                                 package="eseis"), "/"),
                        window = 1.5 * 3600,
                        overlap = 0.5,
                        window_sub = 1800,
                        overlap_sub = 0,
                        lag = 20,
                        deconvolve = TRUE,
                        sensor = "TC120s",
                        logger = "Cube3ext",
                        gain = 1,
                        f = c(0.1, 0.5),
                        sign = TRUE)  
                        
## calculate relative velocity change
dv <- ncc_process(data = cc)

## plot velocity change time series
plot(x = cc$time, 
     y = dv$mean, 
     type = "l")
     
## EXAMPLE II - SYNTHETIC DATA SET INVERSION

## create synthetic correlation function
s_0 <- sin(x = seq(from = 0, to = 12 * pi, length.out = 200)) * 
  dnorm(x = 1:200, mean = 100, sd = 20)

## define stretch value sequence and arbitrary time vector
e <- seq(from = 0, to = 0.05, length.out = 20)
e <- sin(x = seq(from = 0, to = 4 * pi, length.out = length(s_0))) * 0.05
t <- 1:length(s_0) - mean(1:length(s_0))
t_2 <- seq( from = -1, to = 1, length.out = length(e))

## create synthetic correlation matrix with shifting velocity
S <- do.call(cbind, lapply(X = e, FUN = function(e, s_0, t) {

  spline(x = t, 
         y = s_0, 
         xout = t * (1 + e))$y
}, s_0, t))

## plot synthetic data set, velocity increases linearly by 5 \%
image(x = 1:length(e), y = t, z = t(S))

## create suitable object structure for processing
cc_2 <- list(time = 1:10,
             lag = seq(-10, 10, length.out = length(e)),
             correlation = t(S))

## calculate dv/v
dv <- eseis::ncc_process(data = cc_2, 
                         range = 0.1,
                         steps = 100,
                         reject = 0.05)

## plot results
plot(dv$mean, type = "l")
lines(dv$mean - dv$sd, col = "grey")
lines(dv$mean + dv$sd, col = "grey")
lines(e, col = 4)
                                                              
}
\author{
Michael Dietze
}
\keyword{eseis}
